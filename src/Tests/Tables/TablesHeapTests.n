using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;
using Tao.Metadata.Signatures;
using Tests.Macros;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tests
{
    public class TableHeapTests : FileBasedTableTest
    {
        public ShouldReturnNullWhenExtractingRowZeroFromAnyGivenTable() : void
        {
            def heap = TablesHeap();
            def tableData = MemoryStream(base.GetTableStreamData());
            heap.ReadFrom(tableData);
            
            def row = heap.GetRow.[CustomAttributeRow](0);
            row.ShouldBeNull("The returned row should be null when passing zero as the given row index");
        }
        public ShouldBeAbleToReturnSingleRowFromTargetTable() : void
        {
            def heap = TablesHeap();
            def tableData = MemoryStream(base.GetTableStreamData());
            heap.ReadFrom(tableData);
            
            def row = heap.GetRow.[CustomAttributeRow](1);
            def rowRef = row.Parent.ToRowRef(CodedTokenType.HasCustomAttribute);
            rowRef.TableId.ShouldBeEqualTo(TableId.Module, "Wrong TableId");
            rowRef.Row.ShouldBeEqualTo(1, "Wrong Row Index");
        }
        public ShouldBeAbleToReturnTypedTable() : void
        {
            def heap = TablesHeap();
            def tableData = MemoryStream(base.GetTableStreamData());
            heap.ReadFrom(tableData);
            
            def table = heap.GetTable.[CustomAttributeTable]();
            table.ShouldBeNotNull("Wrong Table");
            table.GetType().ShouldBeEqualTo(typeof(CustomAttributeTable), "Wrong Table Type")            
        }
        public ShouldHaveCorrectMajorVersion() : void
        {
            def heap = TablesHeap();
            def tableData = MemoryStream(base.GetTableStreamData());
            heap.ReadFrom(tableData);

            heap.MajorVersion.ShouldBeEqualTo(2, "Invalid MajorVersion");            
        }
        public ShouldHaveCorrectMinorVersion() : void
        {
            def heap = TablesHeap();
            def tableData = MemoryStream(base.GetTableStreamData());
            heap.ReadFrom(tableData);

            heap.MinorVersion.ShouldBeEqualTo(0, "Invalid MinorVersion");            
        }
        public ShouldHaveMatchingTableDataForReadsAndWritesWithSampleNHibernateAssembly() : void
        {            
            TestTableDataRoundTrip(@"..\..\SampleBinaries\NHibernate.dll");
        }   

        public ShouldHaveMatchingTableDataForReadsAndWritesWithSampleMonoMSCorlibAssembly() : void
        {
            TestTableDataRoundTrip(@"..\..\SampleBinaries\mono-mscorlib.dll");
        }                

        public ShouldHaveMatchingTableHeaders() : void
        {
            def tableData = MemoryStream(base.GetTableStreamData());
            def reader = MetadataTablesHeaderReader();            
            def header = reader.Read(tableData);


            def outputStream = TracerStream(tableData, MemoryStream());

            def headerSize = tableData.Position :> int;
            def expectedHeaderData = MemoryStream(tableData.ReadBytes(headerSize, 0));

            def writer = MetadataTablesHeaderWriter();
            writer.Write(header, outputStream);

            expectedHeaderData.ShouldMatch(outputStream);
        }

        public ignored stub ShouldBeAbleToProduceRowCounts() : void
        {
        }
        protected override TargetAssemblyFileName : string
        {
            get
            {
                @"..\..\SampleBinaries\mono-mscorlib.dll";
            }
        }

        private TestTableDataRoundTrip(filename : string) : void
        {
            def tableData = MemoryStream(base.GetTableStreamData(filename));

            def tableStreams = Dictionary.[TableId, array[byte]]();
            def tableReader = TracingTableReader(TableReader(), tableStreams);
            def tableWriter = TracingTableWriter(TableWriter(), tableStreams);

            def heap = TablesHeap(AggregateTable(tableReader, tableWriter));
            heap.ReadFrom(tableData);

            def tableDataLength = tableData.Length;
            def slackSpace = tableDataLength - tableData.Position;
            when(slackSpace > 0)
            {
                def slackData = tableData.ReadBytes(slackSpace :> int, tableData.Position);
                
                Console.WriteLine("Note: There's a slack space of {0} bytes", slackData.Length);
            }

            def outputStream = TracerStream(tableData, MemoryStream());
            outputStream.Seek(0);
            tableData.Seek(0);

            heap.WriteTo(outputStream);
        }
    }
}
