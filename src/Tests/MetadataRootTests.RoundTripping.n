using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tao;
using Tao.Interfaces;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tests
{
    public partial class MetadataRootTests
    {
        public ShouldBeAbleToRunPEVerifyAgainstSkeletonAssembly() : void
        {
            def targetFile = @"..\..\SampleBinaries\Skeleton.exe";
            def assemblyBytes = File.ReadAllBytes(targetFile);
            assemblyBytes.PEVerifyIt();          
        }   
        public ShouldBeAbleToSwapMetadataRootWithCloneOfTheOriginalRoot() : void
        {
            def targetFile = @"..\..\SampleBinaries\Skeleton.exe";
            def image = Image.ReadFrom(targetFile);

            def clrHeader = image.GetCLRHeader();

            def root = image.GetMetadataRoot();
            def rootRva = clrHeader.MetadataRva;
            def rootSize = clrHeader.MetadataSize;

            // Remove the original root
            image.WriteBlock(rootRva, MemoryStream(array(rootSize :> int) : array[byte]));

            // Inject the cloned metadata root
            def outputStream = WriteOnceStream(MemoryStream());
            image.Write(root, rootRva);

            def writer = ImageWriter();
            writer.Write(image, outputStream);                         
            
            def originalBytes = File.ReadAllBytes(targetFile);
            outputStream.ShouldMatch(originalBytes);                       
            
            _ = outputStream.Seek(0, SeekOrigin.Begin);
            outputStream.PEVerifyIt();
        }
    }
}
