using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tests.Macros;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Interfaces;

namespace Tests
{
    public class SkeletonImageGenerationTests
    {
        public ShouldHaveDosHeader() : void
        {   
            def originalImageLocation = @"..\..\SampleBinaries\Skeleton.exe";
            def originalBytes = MemoryStream(File.ReadAllBytes(originalImageLocation));           

            def outputStream = MemoryStream();
            def tracerStream = TracerStream(originalBytes, outputStream);

            def builder = ImageBuilder();            
            def image = Image();
            builder.BuildImage(image);

            def writer = ImageWriter(array[DosHeaderWriter()]);
            writer.Write(image, tracerStream);

            // Compare the resulting streams
            def dosHeaderLength : uint = 0x3C;
            outputStream.ShouldMatch(tracerStream, dosHeaderLength);
        } 

        public ShouldHaveCoffHeader() : void
        {
            def originalImageLocation = @"..\..\SampleBinaries\Skeleton.exe";
            def originalBytes = MemoryStream(File.ReadAllBytes(originalImageLocation));           

            def outputStream = MemoryStream();
            def tracerStream = TracerStream(originalBytes, outputStream);

            def baseDate = DateTime(1970, 1, 1,);
            def seconds : uint = 0x4AD286DD;
            def timeStamp = baseDate.AddSeconds(seconds);

            def builder = ImageBuilder();            
            builder.TimeStamp = timeStamp;
            
            def image = Image();
            builder.BuildImage(image);           

            // Ensure that the builder created the correct image contents
            def coffHeader = image.CoffHeader;
            def machine = coffHeader.Machine;

            coffHeader.ShouldBeNotNull("There should be a COFF header here");                       
            machine.ShouldBeEqualTo(Machine.I386, "Wrong Machine");            
            coffHeader.TimeDateStamp.ShouldBeEqualTo(seconds, "Wrong Timestamp");

            // Add the required number of sections so that the assertion doesn't fail
            image.Sections.Add(Section());
            image.Sections.Add(Section());

            def writer = ImageWriter(array[DosHeaderWriter(), CoffHeaderWriter()]);
            writer.Write(image, tracerStream);

            def coffHeaderPosition : uint = 0x98;
            outputStream.ShouldMatch(tracerStream, coffHeaderPosition);
        }
    }
}
