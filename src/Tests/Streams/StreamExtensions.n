using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tests.Macros;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Diagnostics;
using System.IO;
using System.Linq;

using Tao;

namespace Tests
{
    public static class StreamExtensions
    {        
        public static PEVerifyIt([NotNull] this bytes : array[byte]) : void
        {
            def stream = MemoryStream(bytes);
            stream.PEVerifyIt();
        }

        public static PEVerifyIt([NotNull] this stream : Stream) : void
        {
            _ = stream.Seek(0, SeekOrigin.Begin);
            stream.PEVerifyItAs(Path.GetTempFileName());
        }

        public static PEVerifyItAs([NotNull] this stream : Stream, filename : string) : void
            requires stream.Length > 0 otherwise throw ArgumentException("stream", "You can't run PEVerify against an empty stream")
        {
            def memoryStream = MemoryStream();
            stream.CopyTo(memoryStream);
            
            // Save the stream to a temp file
            File.WriteAllBytes(filename, memoryStream.ToArray());

            def pathKeys = array["sdkDir", "sdkx86SdkDir", "sdkDirUnderWin7"];                       
            def verifierPath = GetPEVerifyLocation(pathKeys);

            try
            {

            def process = Process();
            def info = process.StartInfo;
            info.FileName = verifierPath;
            info.RedirectStandardOutput = true;
            info.UseShellExecute = false;
            info.WorkingDirectory = AppDomain.CurrentDomain.SetupInformation.PrivateBinPath;
            info.Arguments = "\"" + filename + "\" /VERBOSE";
            info.CreateNoWindow = true;

            _ = process.Start();

            def output = process.StandardOutput.ReadToEnd();
            process.WaitForExit();            

            when (process.ExitCode != 0)
            {
                def result = string.Format("PEVerify Failed! Exit Code: {0}", process.ExitCode);
                Console.WriteLine(result);
                Console.WriteLine(output);
                Assert.Fail("PEVerify output: " + Environment.NewLine + output, result);
            }

            }
            finally
            {
                when (File.Exists(filename) && filename.EndsWith("tmp"))
                {
                    File.Delete(filename);
                }
            }
        }
        private static GetPEVerifyLocation([NotNull] pathKeys : IEnumerable.[string]) : string
            ensures File.Exists(value) otherwise throw FileNotFoundException("Unable to find PEVerify.exe")
        {
            mutable result = string.Empty;
            foreach(key in pathKeys)
            {
                def directory = ConfigurationManager.AppSettings[key];

                when (!string.IsNullOrWhiteSpace(directory))
                {
                    def location = Path.Combine(directory, "PEVerify.exe");

                    when(File.Exists(location))
                    {
                        result = location;
                    }
                }
            }
            result;
        }        
        public static ShouldMatch(this bytes : array[byte], otherArray : array[byte], numberOfBytesToMatch : uint) : void
        {
            def firstStream = MemoryStream(bytes);
            def secondStream = MemoryStream(otherArray);
            firstStream.ShouldMatch(secondStream, numberOfBytesToMatch);
        }
        
        public static ShouldMatch(this bytes : array[byte], otherStream : Stream, numberOfBytesToMatch : uint) : void
        {
            def firstStream = MemoryStream(bytes);
            firstStream.ShouldMatch(otherStream, numberOfBytesToMatch);
        }
        
        public static ShouldMatch(this stream : Stream, otherStream : Stream, numberOfBytesToMatch : uint) : void
            requires stream.Length >= numberOfBytesToMatch
            requires (otherStream.Length :> uint) >= numberOfBytesToMatch
            requires numberOfBytesToMatch > 0
        {
            def firstBytes = stream.ReadBytes(numberOfBytesToMatch :> int, 0);
            def secondBytes = otherStream.ReadBytes(numberOfBytesToMatch :> int, 0);
            firstBytes.ShouldMatch(secondBytes);
        }
        
        public static ShouldCompletelyMatch(this otherArray : array[byte], stream : Stream) : void
        {
            // Match the contents
            def otherStream = MemoryStream(otherArray);
            otherStream.ShouldMatch(stream);
            (stream.Length == otherArray.Length).ShouldBeTrue("The two stream sizes don't match each other");
        }
        
        public static ShouldCompletelyMatch(this stream : Stream, otherStream : Stream) : void
        {
            otherStream.ShouldMatch(stream);
            (stream.Length == otherStream.Length).ShouldBeTrue("The two stream sizes don't match each other");
        }
        
        public static ShouldCompletelyMatch(this stream : Stream, otherArray : array[byte]) : void
        {
            // Match the contents
            def otherStream = MemoryStream(otherArray);
            stream.ShouldMatch(otherStream);
            
            // Match the length
            (stream.Length == otherArray.Length).ShouldBeTrue("The two stream sizes don't match each other");
        }    
        
        public static ShouldMatch(this otherArray : array[byte], stream : Stream) : void
        {
            def otherStream = MemoryStream(otherArray);
            otherStream.ShouldMatch(stream);
        }
        
        public static ShouldMatch(this stream : Stream, otherArray : array[byte]) : void
        {
            def otherStream = MemoryStream(otherArray);
            stream.ShouldMatch(otherStream);
        }    

        public static ShouldMatch(this stream : Stream, other : Stream) : void
        {
            def hash = stream.GetHash();
            def otherHash = other.GetHash();

            mutable smallerStream = other;            
            when(other.Length > stream.Length)
            {
                smallerStream = stream;
            }

            def getMismatchPosition(startPosition : int, windowSize : int, firstStream : Stream, 
            secondStream : Stream) : int

            {
                _ = firstStream.Seek(startPosition, SeekOrigin.Begin);
                _ = secondStream.Seek(startPosition, SeekOrigin.Begin);

                def outputReader = BinaryReader(firstStream);
                def inputReader = BinaryReader(secondStream);

                def firstBytes = outputReader.ReadBytes(windowSize);
                def secondBytes = inputReader.ReadBytes(windowSize);

                mutable result = startPosition;
                def newStartPosition = startPosition + windowSize;
                if(firstBytes.GetHash() == secondBytes.GetHash())
                {                    
                    result = getMismatchPosition(newStartPosition, windowSize, firstStream, secondStream);
                }
                else 
                {
                    when(firstBytes.Length > 1)
                    {
                        result = startPosition + getMismatchPosition(0, windowSize / 2, MemoryStream(firstBytes), MemoryStream(secondBytes));
                    }                    
                }

                result;
            }

            when(hash != otherHash)
            {
                def mismatchPosition : int = getMismatchPosition(0, smallerStream.Length :> int, stream, other);
                _ = stream.Seek(mismatchPosition, SeekOrigin.Begin);
                _ = other.Seek(mismatchPosition, SeekOrigin.Begin);

                def expected = other.ReadByte();
                def actual = stream.ReadByte();
                
                NUnit.Framework.Assert.Fail("Streams don't match, starting at byte position 0x{0}; Expected Value: 0x{1}, Actual Value: 0x{2}", mismatchPosition.ToString("x"), expected.ToString("x"), actual.ToString("x"));
            }
        }   
        public static GetReader([NotNull] this stream: Stream) : BinaryReader
        {
            BinaryReader(stream);
        }

        public static ShouldMatch([NotNull] this currentStream : Stream, [NotNull] otherStream : Stream, startPosition : uint, length : uint, 
    failureMessage : string, params args : array[object]) : void
        {
            def matchesOtherStream = currentStream.Matches(otherStream, startPosition, length);
            when (!matchesOtherStream)
            {
                NUnit.Framework.Assert.Fail(failureMessage, args);
            }
        }
        public static Matches([NotNull] this currentStream : Stream, [NotNull] otherStream : Stream, startPosition : uint, length : uint) : bool
        requires startPosition <= currentStream.Length
        {
            def expectedData = currentStream.GetData(startPosition, length);
            def actualData = otherStream.GetData(startPosition, length);
            def expectedHash = expectedData.GetHash();
            def actualHash = actualData.GetHash();

            expectedHash == actualHash;
        }

        public static GetData([NotNull] this currentStream : Stream, startPosition : uint, size : uint) : array[byte]
        requires startPosition <= currentStream.Length
        {            
            _ = currentStream.Seek(startPosition, SeekOrigin.Begin);
            def reader = BinaryReader(currentStream);

            reader.ReadBytes(size :> int);
        }
    }
}
