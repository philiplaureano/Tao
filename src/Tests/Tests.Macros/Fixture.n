using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Tests.Macros
{    
  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Class)]
  macro UnitTestFixture(typeBuilder : TypeBuilder)
  {
    UnitTestFixtureImpl.DoTransform(Macros.ImplicitCTX(), typeBuilder)
  }
  
  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Assembly)]
  macro SetTestAttributesByConvention()
  {
    UnitTestFixtureImpl.DoGlobalTransform(Macros.ImplicitCTX())
  }    
  
  macro assert_condition(exp1, errorMessage)
  syntax("assert", exp1, "istrue", "otherwiseprint", errorMessage)
  {
    <[NUnit.Framework.Assert.IsTrue( $exp1, $errorMessage)]>;  
  }
  macro assert_equals(exp1,exp2, errorMessage) 
  syntax("assert", exp1, "equals", exp2, "otherwiseprint", errorMessage)
  {
    <[NUnit.Framework.Assert.AreEqual( $exp2 ,$exp1, $errorMessage )]>;
  }
  
  macro assert_not_null(exp, errorMessage)
  syntax("assert", exp, "notnull", "otherwiseprint", errorMessage)
  {
      <[NUnit.Framework.Assert.IsNotNull($exp,$errorMessage)]>;
  }
  
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Method)]
  macro IgnoreTest(_typeBuilder : TypeBuilder, method : ParsedMethod)
  syntax ("ignored")
  {
    method.AddCustomAttribute(<[ NUnit.Framework.IgnoreAttribute() ]>);
  }
  
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Method)]
  macro NotImplemented(_typeBuilder : TypeBuilder, method : ParsedMethod)
  syntax ("stub")
  {
    def body = method.Body;
    method.Body = Util.locate(body.Location, 
  <[ 
    throw System.NotImplementedException();
   ]>);
  }
  
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Method)]
  macro TestExpects(_typeBuilder : TypeBuilder, method : ParsedMethod, exception)
  syntax ("expects", exception)
  {
    method.AddCustomAttribute(<[ NUnit.Framework.ExpectedExceptionAttribute(typeof($exception)) ]>);
  }
  module UnitTestFixtureImpl
  {
    public DoTransform(typer : Typer, typeBuilder : TypeBuilder) : void
    {
      Macros.DefineCTX(typer);
      AddAttributes(typeBuilder);
    }
    
    public DoGlobalTransform(typer : Typer) : void
    {
      Macros.DefineCTX(typer);

      def typeBuilders = typer.Manager.CoreEnv.NameTree.NamespaceTree.GetTypeBuilders(onlyTopDeclarations = true);
      foreach (typeBuilder in typeBuilders)
      {
        // Add the NUnit attributes to concrete classes that end with the word "Tests" by default
        def typeName = typeBuilder.Name;
        when(typeName.EndsWith("Tests") && !typeBuilder.IsAbstract)
        {
          AddAttributes(typeBuilder);
        }
      }     
    }
    
    private AddAttributes(typeBuilder : TypeBuilder) : void
    {
      typeBuilder.GetModifiers().AddCustomAttribute (<[ NUnit.Framework.TestFixtureAttribute ]>);
      def methods = typeBuilder.GetMethods(BindingFlags.Instance | BindingFlags.Public | BindingFlags.DeclaredOnly);
      
      foreach(method in methods)
      {          
        def modifiers = method.GetModifiers();
        unless(method.IsPrivate || method.IsStatic || IsSetupOrTearDownMethod(method))
        {
          modifiers.AddCustomAttribute(<[ NUnit.Framework.TestAttribute ]>);      
        }
        
        def methodName = method.Name;
        match(methodName)
        {
          | "Setup" => modifiers.AddCustomAttribute(<[ NUnit.Framework.SetUpAttribute ]>);  
          | "Teardown" =>modifiers.AddCustomAttribute(<[ NUnit.Framework.TearDownAttribute ]>)
          | _ =>{}
        }
      }
    }
    
    private static GetTestMethodName(methodName : string) : string
    {
        def characters : array[char] = methodName.ToCharArray();
        def chars = System.Collections.Generic.Queue.[char](characters);        

        mutable text = string.Empty;
        while(chars.Count > 0)
        {
            def nextChar = chars.Peek();
            def currentChar = chars.Dequeue();

            when(char.IsUpper(nextChar))
            {
                text += ",";
            }

            text += currentChar.ToString();
        }

        def words = text.Split(',');
        mutable newMethodName = string.Empty;

        mutable wordCount = 0;
        mutable totalWordCount = words.Length;
        mutable index = 0;
        foreach(word in words)
        {
            when(!string.IsNullOrEmpty(word))
            {
                if(wordCount == 0)
                {
                    newMethodName += word;
                }
                else
                {
                    newMethodName += word.ToLowerInvariant();
                }
                when(index < totalWordCount - 1)
                {
                    newMethodName += "_";
                }
                wordCount++;
            }
            index++;
        }
        
        newMethodName;
    }
    private IsSetupOrTearDownMethod(method: IMethod) : bool
    {
      def methodName = method.Name;
      methodName == "Setup" || methodName == "Teardown";
    }
  }
}

