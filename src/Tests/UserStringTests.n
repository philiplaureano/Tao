using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tao;
using Tao.Interfaces;
using Tao.Metadata;
using Tests.Macros;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tests
{
  public class UserStringTests
  {
    public ShouldBeAbleToReadUserString() : void
    {
      TestRead(1 : uint, "Hello, World!");
      TestRead(0x1D : uint, "Hello, World Again!");
    }
    public ShouldReturnEmptyStringOnZeroIndex() : void
    {
      def index : uint = 0;
      def expectedString = string.Empty;

      TestRead(index, expectedString);
    }
    public ignored stub ShouldBeAbleToWriteUnicodeString() : void
    {        
    }
    public ShouldBeAbleToWriteUserString() : void
    {
      def expectedData = array[
	    0x00 : byte, 0x1B, 0x48, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x2C, 0x00, 0x20, 0x00,
	    0x57, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x21, 0x00, 0x00];
	  
      def expectedOffset = 1;      
      def inputString = "Hello, World!";
      
      // Create an empty heap
      def outputStream = MemoryStream(29);
      def binaryWriter = BinaryWriter(outputStream);
      binaryWriter.Write(0 : byte);
	  
      def writer = UserStringHeapWriter();
      def offset = writer.Write(inputString, outputStream);
	  
      outputStream.ShouldMatch(expectedData);
      assert offset equals expectedOffset otherwiseprint "Invalid offset";
    }
    public ignored stub ShouldBeAbleToConvertCollectionOfUserStringsIntoAStream() : void
    {
    }
    private TestRead(index : uint, expectedString: string) : void
    {
      def imageFile = @"..\..\SampleBinaries\HelloWorld.exe";
      def image = Image.ReadFrom(imageFile);
      def metadataRoot = image.GetMetadataRoot();
      def heap = metadataRoot.Heaps["#US"];
      
      def reader = UserStringHeapReader();
      def text = reader.Read(index, heap);
      
      assert text equals expectedString otherwiseprint "Invalid user string";
    }
  }
}