using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tests.Macros;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Interfaces;
using Tao.Metadata;

namespace Tests
{
    public class TextSectionWriteTests
    {
        public ShouldGenerateImportAddressTable() : void
        {
            def assemblyFile = @"..\..\SampleBinaries\Skeleton.exe";
            def image = Image.ReadFrom(assemblyFile);
            def iatDirectory = image.DataDirectories[12];
            def iatRva = iatDirectory.Rva;
            def iatSize = iatDirectory.Size;

            // Read the actual IAT contents
            def expectedStream = image.ReadBlock(Location.ImportAddressTable);            
            def reader = BinaryReader(expectedStream);
            def nameTableRva = reader.ReadUInt32();

            // Given the name table RVA, the 
            // writer should produce exactly the same output
            def actualStream = MemoryStream();
            def writer = ImportAddressTableWriter(() => nameTableRva);
            writer.Write(actualStream);

            actualStream.ShouldCompletelyMatch(expectedStream);
        }
        public stub ShouldReturnCorrectSizeForCLIHeader() : void
        {
        }
        public stub ShouldWriteMethodBodyBlock() : void
        {
        }
        public stub ShouldWriteResourceSectionWhenAvailable() : void
        {
        }
        public stub ShouldWriteMetadataHeader() : void
        {
        }
        public ShouldWriteMscorlibName() : void
        {
            // The bytes should always be "mscoree.dll" followed by two null terminators            
            def expectedBytes = array[0x6D : byte, 0x73, 0x63, 0x6F, 0x72, 0x65, 0x65, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00];
            def outputStream = MemoryStream();
            
            def writer = MscorlibNameWriter();
            writer.Write(outputStream);
            
            expectedBytes.ShouldCompletelyMatch(outputStream);
        }
        public ShouldWriteImportTable() : void
        {
            def assemblyFile = @"..\..\SampleBinaries\HelloWorld.exe";
            def image = Image.ReadFrom(assemblyFile);
            
            // Read the import table
            def directories = image.DataDirectories;
            def expectedStream = image.ReadBlock(Location.ImportTable);
            def importTableRva = directories[1].Rva;
            def iatRva = directories[12].Rva;
            def isDll = assemblyFile.EndsWith("dll");
            
            throw NotImplementedException("TODO: Implement the ImportTableWriter");
        }
        
        public ShouldWriteCLIHeader() : void
        {
            def assemblyFile = @"..\..\SampleBinaries\HelloWorld.exe";
            def image = Image.ReadFrom(assemblyFile);
            def expectedStream = image.ReadBlock(Location.CLIHeader);
            
            def outputStream = MemoryStream();
            def cliHeader = image.GetCLRHeader();
            def writer = CLIHeaderWriter();
            writer.Write(cliHeader, TracerStream(expectedStream, outputStream));
        }
        public stub ShouldWriteStartupStub() : void
        {            
        }
        public ShouldWriteImportHintNameTableForDllFile() : void
        {
            def assemblyFile = @"..\..\SampleBinaries\Skeleton.exe";
            TestHintNameTableWrite(assemblyFile);
        }
        public ShouldWriteImportHintNameTableForExeFile() : void
        {
            def assemblyFile = @"..\..\SampleBinaries\NHibernate.dll";
            TestHintNameTableWrite(assemblyFile);
        }
        public stub ShouldGenerateCorrectHeapSizeByteFromGivenHeaps() : void
        {
        }
        private TestHintNameTableWrite(assemblyFile : string) : void
        {
            def isDll = assemblyFile.EndsWith(".dll");            
            def image = Image.ReadFrom(assemblyFile);
            def iatDirectory = image.DataDirectories[12];
            def iatStream = image.ReadBlock(Location.ImportAddressTable);            
            
            // Find the hint name table rva
            def reader = BinaryReader(iatStream);
            def hintNameTableRva = reader.ReadUInt32();
            
            // Read the original hint name table
            def nameTableData = image.ReadBlock(hintNameTableRva, 0xE :> uint);
            def writer = HintNameTableWriter();
            
            def actualStream = MemoryStream();
            writer.Write(isDll, actualStream);            
            nameTableData.ShouldCompletelyMatch(actualStream);
        }
    }
}
