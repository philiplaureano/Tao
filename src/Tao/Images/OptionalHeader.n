using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tao.Interfaces;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Tao
{  
    public abstract class OptionalHeader : IOptionalHeader
    {
        public StandardFields : IOptionalHeaderStandardFields
        {
            get;set;
        }

        public abstract NTHeader : INTHeader { get;set; };

        public class OptionalHeader32 : OptionalHeader
        {
            public this(standardFields : IOptionalHeaderStandardFields, header : INTHeader[uint])
            {
                base.StandardFields = standardFields;
                Header = header;
            }

            public Header : INTHeader[uint]
            {
                get; set;
            }

            public override get_NTHeader() : INTHeader
            {
                Header;   
            }

            public override set_NTHeader(ntHeader : INTHeader) : void
                requires ntHeader == null || (ntHeader != null && ntHeader is INTHeader[uint])
            {
                Header = ntHeader :> INTHeader[uint];
            }
        }

        public class OptionalHeader64 : OptionalHeader
        {
            public this(standardFields : IOptionalHeaderStandardFields, header : INTHeader[ulong])
            {
                base.StandardFields = standardFields;
                Header = header;
            }

            public Header : INTHeader[ulong]
            {
                get;set;
            }

            public override get_NTHeader() : INTHeader
            {
                Header;   
            }

            public override set_NTHeader(ntHeader : INTHeader) : void
                requires ntHeader == null || (ntHeader != null && ntHeader is INTHeader[ulong])
            {
                Header = ntHeader :> INTHeader[ulong];
            }
        }        
    }
}
