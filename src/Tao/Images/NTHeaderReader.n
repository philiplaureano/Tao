using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tao.Interfaces;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao
{
  public abstract class NTHeaderReader[TSize] : INTHeaderReader[TSize]
    where TSize : struct
  {      
    public Read([NotNull] stream : Stream) : INTHeader[TSize]
        requires stream.Length > 0 otherwise throw ArgumentException("stream", "The NT Header stream cannot be empty")
    {
      def reader = BinaryReader(stream);
          
      def header = CreateHeader();
      header.ImageBase =  ReadValue(reader);
          
      header.SectionAlignment = reader.ReadUInt32();
      header.FileAlignment = reader.ReadUInt32();
      header.MajorOperatingSystemVersion = reader.ReadUInt16();
      header.MinorOperatingSystemVersion = reader.ReadUInt16();
      header.MajorImageVersion = reader.ReadUInt16();
      header.MinorImageVersion = reader.ReadUInt16();
      header.MajorSubsystemVersion = reader.ReadUInt16();
      header.MinorSubsystemVersion = reader.ReadUInt16();
      header.Win32VersionValue = reader.ReadUInt32();
      header.SizeOfImage = reader.ReadUInt32();
      header.SizeOfHeaders = reader.ReadUInt32();
      header.CheckSum = reader.ReadUInt32();
      header.Subsystem = reader.ReadUInt16() :> Subsystem;
      header.DllCharacteristics = reader.ReadUInt16() :> DLLCharacteristics;
          
      header.SizeOfStackReserve = ReadValue(reader);
      header.SizeOfStackCommit = ReadValue(reader);
      header.SizeOfHeapReserve = ReadValue(reader);
      header.SizeOfHeapCommit = ReadValue(reader);;
          
          // Ignore the LoaderFlags field and skip to the next field
      _ = reader.ReadUInt32();
          
      header.LoaderFlags = 0;
      header.NumberOfRvaAndSizes = reader.ReadUInt32();
          
      header;
    }
    
    protected abstract CreateHeader() : INTHeader[TSize];
    protected abstract ReadValue(reader : BinaryReader) : TSize;
  }
}
