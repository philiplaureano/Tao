using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tao.Interfaces;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao
{  
    public class DosHeader : IDosHeader
    { 
        public this()
        {
            mutable bytes = array[ // dos header start
                0x4d : byte, 0x5a, 0x90, 0x00, 0x03, 0x00, 0x00,
                0x00, 0x04, 0x00, 0x00, 0x00, 0xff, 0xff,
                0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
                // lfanew
                0x80, 0x00, 0x00, 0x00,
                // dos header end
                0x0e, 0x1f, 0xba, 0x0e, 0x00, 0xb4, 0x09,
                0xcd, 0x21, 0xb8, 0x01, 0x4c, 0xcd, 0x21,
                0x54, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72,
                0x6f, 0x67, 0x72, 0x61, 0x6d, 0x20, 0x63,
                0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62,
                0x65, 0x20, 0x72, 0x75, 0x6e, 0x20, 0x69,
                0x6e, 0x20, 0x44, 0x4f, 0x53, 0x20, 0x6d,
                0x6f, 0x64, 0x65, 0x2e, 0x0d, 0x0d, 0x0a,
                0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00];

            def headerStream = MemoryStream(bytes);
            this(headerStream);
        }

        public this(headerStream : Stream) 
        {
            Data = headerStream;
        }

        public LfaNew : uint
        {
            get 
                requires Data != null
                requires Data.Length >= 0x3C
            {
                def reader = BinaryReader(Data);
                _ = Data.Seek(0x3C, SeekOrigin.Begin);
                reader.ReadUInt32();
            }

            set
                requires Data != null
            {
                def writer = BinaryWriter(Data);
                _ = Data.Seek(0x3C, SeekOrigin.Begin);
                writer.Write(value : uint);
            }
        }

        public Data : Stream
        {
            get;set; 
        }
    }
}
