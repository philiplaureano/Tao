using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tao.Interfaces;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Tao
{  
  public class SectionHeaderReader : ISectionHeaderReader
  {
    public Read(numberOfSections : uint, [NotNull] inputStream : Stream) : IEnumerable[ISectionHeader]
        requires inputStream.Length > 0
        ensures value != null
    {
      def reader = BinaryReader(inputStream);
      def results = List();
          
      def stringReader = NullTerminatedStringReader();
      for(mutable i : uint = 0; i < numberOfSections; i++)
      {
        def header = SectionHeader();
        header.Name = stringReader.Read(8, inputStream);
        header.VirtualSize = reader.ReadUInt32();
        header.VirtualAddress = reader.ReadUInt32();
        header.SizeOfRawData = reader.ReadUInt32();
              
        header.PointerToRawData = reader.ReadUInt32();
        header.PointerToRelocations = reader.ReadUInt32();
        header.PointerToLineNumbers = reader.ReadUInt32();
              
        header.NumberOfRelocations = reader.ReadUInt16();
        header.NumberOfLineNumbers = reader.ReadUInt16();
              
        header.Characteristics = reader.ReadUInt32() :> SectionFlags;
              
        results.Add(header);
      }
          
      results;
    }
  }
}
